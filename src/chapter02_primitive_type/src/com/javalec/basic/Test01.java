package com.javalec.basic;

public class Test01 {
	public static void main(String[] args) {
	/*
	 * 자료형(type) : 데이터의 형태 
	 * 자바에서 자료형은 크게 2가지로 분류된다. 
	 *  1. 원시자료형 (primitive type)
	 *  2. 참조자료형 (reference type)
	 * 오늘 배울 것은 1번 '원시자료형'이다.
	 * 
	 * 원시자료형은 '정수, 실수, 논리, 문자' 이렇게 네 분류로 나뉘고 총 8가지가 있다. 
	 * 1. 정수형 4가지 : byte, short, int, long
	 * 2. 실수형 2가지 : float, double
	 * 3. 논리형 1가지 : boolean
	 * 4. 문자형 1가지 : char
	 * (5. 문자열형 : String <-- 원시자료형에는 해당되지 않으나 워낙 자주 쓰여서 원시자료형 취급해주는 참조자료형..ㅎ)
	 * 
	 * 하나씩 살펴보자.
	 * 
	 * 1. 정수형 (크기 순으로)
	 *  1) byte 
	 *   - 하나의 byte형 정수는 1byte를 차지한다. (8bit)
	 *   - 총 2의 8승가지(256가지) 데이터를 표현할 수 있다.
	 *   - 범위 : -(2^7) ~ (2^7)-1
	 *          (-128 ~ +127) 
	 *          
	 *  2) short
	 *   - 하나의 short형 정수는 2byte를 차지한다. (16bit)
	 *   - 총 2의 16승가지(65,536가지) 데이터를 표현할 수 있다.
	 *   - 범위 : -(2^15) ~ (2^15)-1
	 *          (-32,768 ~ +32,767) 
	 *          
	 *  3) int (핵 중요!)
	 *   - 하나의 int형 정수는 4byte를 차지한다. (32bit)
	 *   - 총 2의 32승가지(4,294,967,296가지) 데이터를 표현할 수 있다.
	 *   - 범위 : -(2^31) ~ (2^31)-1
	 *          (-2,147,483,648 ~ +2,147,483,647)        
	 *   - 정수 데이터의 기본 자료형 <-- ********별표 백 만 개*********
	 *   
	 *   여기서.. 범위란 것이 무슨 의미인지 알아보자.
	 */
		System.out.println(10000); // <-- 우리가 자바에서 일반적으로 사용하는 1, 15, -10, 10000 등의 정수 데이터를 정수 리터럴이라고 하는데, 
		                           // 정수 리터럴들은 메모리에 기본적으로 int형식 저장되어있다.
		
		// 이때 이들은 int로 잡혀있기 때문에 한계가 생긴다. 
		System.out.println(2147483647); // 이건 되는데
//		System.out.println(2147483648); // 이건 안된다는 의미이다.(범위를 넘어감)
//		System.out.println(10000000000);// 100억이다. 이것 또한 당연히 안된다. ㅠㅠ
	
//		하지만 다행히도 int보다 큰 정수형이 있다. 바로 long형!
		
	/*  4) long
	 *   - 하나의 long형 정수는 8byte를 차지한다. (64bit)
	 *   - 총 2의 64승가지(18,446,744,073,709,551,616가지ㅋㅋ) 데이터를 표현할 수 있다.
	 *   - 범위 : -(2^63) ~ (2^63)-1
	 *          (-9,223,372,036,854,775,808 ~ +9,223,372,036,854,775,807) 
	 */
//		그렇다면, 100억이나 1조 같은 큰 정수는 이 long형을 활용할 수 있지 않을까?
//		System.out.println(1000000000000); // 1조다.. 그냥 쓰면 int로 처리되어버리니 에러가 난다.
		System.out.println(1000000000000L); // 끝에 L을 붙이면 long형으로 처리하라는 의미이다!(대소문자 상관 X)
											// 참고로 short와 byte형은 접미사가 없다.
		
//		참고 : 그럴 일은 드물지만.. 혹시나 long형도 소화할 수 없는 큰 정수를 사용해야 한다면?
//		BigInteger라는 클래스가 있다. 이건 Java 과정 모두 끝나고 검색해보면 손쉽게 사용할 수 있다.
		
//		참고 : 4byte짜리 int형이 기본자료형으로 지정된 이유가 있는데,
//           자바가 개발될 당시 최고 좋은 CPU는 32bit CPU였다.
//           이는 CPU(중앙처리장치, 연산담당, 컴퓨터의 두뇌)가 데이터를 한 번 읽어들일 수 있는 단위가 32bit(4byte)라는 의미이다.
//           (e.g. 데이터가 17byte 길이라면, 4/4/4/4/1 총 5번을 읽어들인다.) 
//	                 따라서 32bit 단위로 끊어서 연산시키기 편하도록 int를 기본으로 지정한 것이다. 요즘은 64bit지만..;

	/*
	 * 2. 실수형 (크기 순으로)
	 *  1) float
	 *   - 하나의 float형 실수는 4byte를 차지한다. (32bit)
	 *   - 1.4E-45 ~ 3.4028235E38
	 *    (소숫점 46자리 ~ 38자리(일십백천만십만백만..해서 38자리..))
	 *    
     *  2) double
	 *   - 하나의 double형 실수는 8byte를 차지한다. (64bit)
	 *   - 4.9E-324 ~ 1.7976931348623157E308
	 *    (소숫점 325자리 ~ 308자리(일십백천만십만백만..해서 308자리..ㄷㄷ)) 
	 *   - 실수 데이터의 기본 자료형!!!!!!!!!!!!
	 *   
	 *   참고 : 실수형은 메모리 크기로만 보면 정수형과 비슷하지만. 경우의 수가 무한대에 가깝다.  
	 *   0.007, 0.01007 과 같은 다양한 소숫점을 표현하려면 
	 *   단순 경우의 수를 배분하는 것으로 부족했다. 그렇다고 메모리를 기하급수로 늘이기도 불가능했으므로
	 *   특수한 공식을 사용하기로 약속한다.. 근데.. 그 공식은 매우 어려우니.. 수학 잘하시는 분들만 찾아보세요.. 난 아냐 글러먹었어...
	 *   
	 *   중요 : 그저 우리가 알아야 하는 것은 double형이 실수 리터럴의 기본 자료형이라는 것이고
	 *         공식에 의거하여 연산하기 때문에 미묘한 '오차가 있다'는 것 정도이다.
	 */
		System.out.println(1.104 + 0.1); // 결과:1.2040000000000002 이럴 땐 당황하지 말고 넘기는 것이 정신건강에 좋다.
		System.out.println(1.0); // 소숫점을 붙이면 기본 double로 잡힌다. (끝에 D를 붙여도 된다.)
		System.out.println(1.1F);// 만약 float으로 처리하고 싶다면 끝에 f를 붙여주면 된다.
		
//		하지만 float 사용은 비추천한다.
//		왜냐하면 정밀성이 double이 훨씬 높고, (비유로 float이 0.0001의 오차가 있다면 double은 0.0000000001의 오차가 발생하는 식)
//		요즘 CPU는 거의 64bit라서 float은 어차피 cpu한테 전달될때는 8byte로 변환되어 전달된다.
//		4byte 아끼자고 매번 변환시키는 것은 비효율적이다!
		
		System.out.println("===여러가지 실수 표현===");
		System.out.println(3.); // 3.0
		System.out.println(.3); // 0.3
		System.out.println(3e1); // 30 (3 * 10의 1승)
		System.out.println(3e2); // 300(3 * 10의 2승)
		System.out.println(3e-1);// 0.3(3 * 10의 -1승)
		// 접미사 D,F,L,E는 대소문자 상관없다.
		
	/*
	 * 3. 문자형 : char
	 *  - 문자 1개를 표현할 때 사용
	 *  - 하나의 char당 2byte 크기를 차지한다. (16byte, 65536가지)
	 *  - 문자열이란 이러한 char형 데이터 여러 개가 한 줄로 나열되어있는 것을 말한다.
	 *  - 이전 언어 C/C++때는 char형이 1byte였으나 자바부터는 2byte로 크기를 늘렸다. 
	 *    C언어 시절에는 아스키코드만 있었고, 자바때는 유니코드가 등장했음
	 *  
	 *  < ASCII와 UNICODE >
	 *  - 문자 집합
	 *  - 컴퓨터는 0과 1만 인식 -> 숫자는 표현 가능 -> 하지만 문자는 표현 불가능 -> 문자도 표현하고 싶은 인간의 욕망 ->
	 *    미쿡 사람들이 처음 문자 집합을 만듦 -> 그것이 ASCII (American Standard Code for Information Interchange) 
	 *     e.g. 세상 모든 컴퓨터들아 내가 키보드 버튼 중에 'A'를 누르면 65를 저장하고, 반대로 65를 char형으로 보여달라하면 'A'라는 모양으로 보여주셈
	 *    키보드에 있는 특수기호 66자( esc나 enter, @ 등등 )와 숫자 10개, 알파벳 대소문자 52개 총 128개의 문자가 있음 
	 *      * 대문자 A : 65 
	 *      * 대문자 + 32 => 소문자 (e.g. 'a'는 97)
	 *    -> 세월이 흘러 다른 국가들도 자국 문자를 컴퓨터에 담고 싶어함 -> 그 중 동아시아권 문자를 포함하는 유니코드가 등장함!
	 *    -> 하지만 그 당시 char형은 1byte라능.. 1byte는 기껏해야 256가지를 표현할 수 있는데 그와중에 반인 128은 아스키 문자들이 찜하고 있었음
	 *       그래서 글자당 2byte로 늘임. 
	 *       (그래서 이때 C언어에서 한글은 한 글자라도 char 두칸을 차지하는 '문자열' 취급이었다('가'(X) "가"(O))
	 *       	char[3] ch = "가";) 
	 *       유니코드는 2byte라서 65536가지를 표현할 수 있음. 거기서 0~127은 아스키코드가 여전히 차지하고 있고 
	 *       나머지 숫자들을 일본어, 중국어, 한국어가 주로 차지함
	 *    -> 뭐 그래서... 자바에서 char형은 2byte 크기고 유니코드도 표현할 수 있다.
	 */
		System.out.println( '가' ); // 가
		System.out.println( '가' + 0 ); // 44032 ('가'는 메모리에 2byte를 차지하면서 44032라는 값으로 저장되어있음)
		
	/*
	 *  참고 : 역슬래시(\)와 쌍따옴표는(")는 코드 내에서 특수한 역할을 하고 있기 때문에
	 *   피카츄가 "피카피카?"하고 물었다. => 여기 있는 쌍따옴표를 출력하려면 에러가 난다. 
	 *   ( 역슬래시는 키보드의 원화표시를 의미한다. )
	 */
//		에러 : System.out.println("피카츄가 "피카피카?"하고 물었다."); 
		
//		이때 쌍따옴표 앞에 '\'를 하나 붙여주면 된다.
		System.out.println("피카츄가 \"피카피카?\"하고 물었다."); // 결과 : 피카츄가 "피카피카?"하고 물었다.
		
//		같은 원리로 역슬래시(\) 자체를 출력하고 싶을 땐 앞에 \를 하나 더 붙인다.
//		에러 : System.out.println("\(^o^)/");
		System.out.println("\\(^o^)/"); // 결과 : \(^o^)/ 
		
	/*
	 * 4. 논리형 (참/거짓) : boolean
	 *  - 1개의 boolean 데이터당 1byte를 차지한다.
	 *  - int는 43억가지의 상수가 있었고 double은 무한대의 상수가 존재했지만 boolean형은 딱 2개의 상수만 존재한다.
	 *    true와 false. 
	 *    
	 *   실제 메모리로 살펴보면 
	 *     true는   00000001
	 *     false는 00000000 
	 *    1이면 참으로 인식하고 0이면 거짓으로 인식하도록 되어있다. 
	 *  말 그대로 참이냐 거짓이냐에 대한 자료형이다. 나중에 자주 사용하게 되므로 기억을 해두자. 지금은 딱히 확인할 방법이 없다.ㅠ_ㅠ
	 *  
	 */
		System.out.println(true);
		System.out.println(false); // 주의 : 쌍따옴표(") 붙이지 않는다. 붙이면 의미 없는 5글자짜리 텍스트가 된다.
		
	/*  
	 * 쌍따옴표(")로 감싼 데이터는 문자열 상수(string)이라고 한다.
	 *  자바의 문자열 상수에 기본으로 적용되는 자료형은 String이다.
	 *  하지만 String은 원시자료형은 아니다. 그리고 대문자 S다. 이건 다음 파트에서 보자.
	 */
		
//		<이것만 이해하면 자료형 마스터>
		
		System.out.println(1);
		System.out.println(1.0);
		System.out.println('1'); 
		System.out.println("1"); 
		
		// ==> 같은 데이터인가?
	}
}
