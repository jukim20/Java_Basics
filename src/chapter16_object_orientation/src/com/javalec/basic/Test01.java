package com.javalec.basic;
/*
 * < 객체지향 프로그래밍(Object Oriented Programming) >
 * - 기능이나 데이터를 부품(객체)처럼 취급하고 
 *   이들을 한꺼번에 조립하여 프로그램을 제작하는 프로그래밍 패러다임
 * - 자바는 객체지향언어, 클래스 기반언어(모든 코드는 클래스 안에 작성한다)
 * 
 * < 자바에서의 객체 관련 용어 > 
 * - 설계도 		     : 클래스 
 * - 집(부품) 	     : 인스턴스(=객체)
 * - 방 			     : 멤버변수(=필드,field)
 * - 집 주소 		     : 레퍼런스
 * - 집 주소를 적을 메모장  : 레퍼런스 변수
 * 
 * < 참조자료형(=레퍼런스 자료형) >
 * - 주소 데이터의 자료형
 *   의미 : 이 주소는 ~~모양 객체의 주소
 * - 자바에서 사용되는 8가지 원시자료형을 제외한 모든 자료형
 *  e.g String, Integer, Double, Scanner, 우리가 직접 만드는 클래스..
 * - 클래스를 만들면 참조자료형도 만들어진다.
 * 		  
 * < 클래스(설계도) 기반 언어의 장점 > 
 *  1. 다른 프로그램을 만들 때도 사용할 수 있다.
 *  2. 객체(부품)이 여러 개 필요할 때, 해당 클래스를 사용하여 동일한 형태의 객체를 무한히 생성할 수 있다.
 *     (빵과 빵틀의 관계)
 *  
 * ** Person.java로 갈 것
 *      
 */
public class Test01 { // Test02라는 프로그램을 위한 메인클래스
	public static void main(String[] args) {
		// 사람 2명의 이름, 연락처, 나이, 성별을 저장해보자
		// 1. 레퍼런스변수 선언 (메모장 준비)
		// 2. 인스턴스(객체) 생성
		// 3. 인스턴스의 주소를 레퍼런스에 저장(메모장에 주소 적기)
		// 4. 메모장을 보면서(참조하면서) 인스턴스에 접근하기
		
		// 1. 레퍼런스 변수 p1, p2 선언 
		Person p1; 
		Person p2; 
		/*
		 * - 위의 Person p1; 에서 Person는 '참조자료형(reference type)'이다.
		 *   결국 '자료형 변수명'의 형식이므로 변수 선언의 의미가 되는데, 이때 p1은 레퍼런스변수(참조변수)다.
		 *   ** 주의! 레퍼런스변수는 객체(인스턴스)가 아니다!
		 *      객체의 주소를 저장할 메모장이다.
		 * - 세상 모든 레퍼런스변수는 자료형이 무엇이든간에 무조건 4byte 길이를 가지고 있다.
		 * - 참조자료형(Person)의 의미?
		 *   : 이 주소 찾아가면 Person모양 객체 있다! <= 미리 알려주는 역할  
		 * 
		 * ** 레퍼런스(참조)란?
		 *   - 메모리의 주소
		 *   - 메모리의 위치를 unsigned int(양의 정수)로 표시
		 *   - 메모리 1byte 당 1번지
		 *   - 0번지 ~ 약43억번지까지 존재
		 *   - 주소는 4byte 길이를 가진다.
		 *     00000000 00000000 00000000 0000001 : 1번지
		 *     00000000 00000000 00000000 0000010 : 2번지
		 *     ....
		 *     11111111 11111111 11111111 1111111 : (2^32)-1, 약 43억번지
		 *   - 주소는 정수형 데이터다. (하지만 코드상에서 int형으로 취급하지는 않는다.) 
		 *   - 따라서 참조변수는 주소만 저장할 것이기때문에 딱 4byte 크기를 가지는 것이다.
		 *     
 		 */
		
		// 2. 인스턴스(객체) 생성 + 3. 인스턴스의 주소를 레퍼런스에 저장(메모장에 주소 적기)
		// 형식 : new 클래스명(); 
		//      이 클래스대로 인스턴스를 생성하고 그 주소(레퍼런스)를 알려줘!
		p1 = new Person(); // Person모양 인스턴스 생성 -> 주소가 뿅! -> 그 주소를 p1 메모장에 저장
		p2 = new Person(); // Person모양 인스턴스를 또 생성 -> 주소가 뿅! -> 그 주소를 p2 메모장에 저장
		
		// 4. 메모장을 보면서(참조하면서) 인스턴스에 접근하기
		// 형식 : 주소.멤버
		// . : ~의
		p1.name = "김피카츄";
		p1.age = 10;
		p1.tel = "010-1111-2222";
		p1.male = true;
		
		System.out.println("==== p1 정보 ====");
		System.out.println("이름 : " + p1.name);
		System.out.println("나이 : " + p1.age + "세");
		System.out.println("연락처 : " + p1.tel);
		System.out.println("성별 : " + (p1.male ? "남자":"여자") );
		
		System.out.println("==== p2 정보 ====");
		System.out.println("이름 : " + p2.name);
		System.out.println("나이 : " + p2.age + "세");
		System.out.println("연락처 : " + p2.tel);
		System.out.println("성별 : " + (p2.male ? "남자":"여자") );
		//  => 값 저장을 안하면 모두 0으로 초기화.
		//  String : null
		//  정수/실수 : 0
		//  boolean : false
		
//		< 출력 결과 >
//		==== p1 정보 ====
//		이름 : 김피카츄
//		나이 : 10세
//		연락처 : 010-1111-2222
//		성별 : 남자
//		==== p2 정보 ====
//		이름 : null
//		나이 : 0세
//		연락처 : null
//		성별 : 여자
	} 
}
























