package com.javalec.basic; // 주의 : 자동으로 작성되는 이 부분은 건들지 마세요!

// 첫 자바 코드를 작성해봅시다!

// 1. 소스 파일 만들기 ( .java)
//  형식 : 
//	public class 클래스명 {
//
// 		public static void main(String[] args){
//			명령문1;
//			명령문2;
//			명령문3;	
//			...
//		}
//	}

//	< 소스파일 작성 시 유의사항 >
//	1) 클래스명과 소스파일명은 동일하게, 대소문자도 똑같이 작성해야 한다.
//  2) 메모장으로 작성할 경우, 저장 시 반드시 파일 형식은 '모든 파일'로 선택해야 하며, 
//     확장자는 .java로 한다. 
//		('모든 파일'로 선택하지 않을 경우, 파일명.java.txt 라는 텍스트 파일이 되므로 주의하자!)
//  3) 이름들(소스파일, 클래스)은 띄어쓰기를 할 수 없다.
//  4) 클래스명은 보통 맨 앞 글자를 대문자로 한다. (자바의 규칙 중 하나이다.)
//	5) 만약 소스코드를 수정했다면 이를 재저장해서 갱신해야 한다.

// 2. 컴파일 하기 ( .class 파일 생성하기)
//  형식 : (cmd에서) javac 소스파일명.java
//  e.g. javac MyFirstJava.java
//
// < 컴파일 시 주의점 >
//  - javac나 java 등, 자바개발에 사용되는 명령들을 
//    어느 위치에서든 실행하고자 한다면 
//    환경 변수 중 'path'에 jdk의 bin 폴더(여기에 java, javac 등의 명령어가 들어있음)가 저장되어있어야 한다.
//    (안잡혀있으면 cd로 jdk의 bin폴더까지 찾아가서 실행해야 하는 번거로움이 있다.)
//  - 컴파일은 소스파일 위치에서 실행해야 한다.
//    명령1. 이동 하기 : cd 폴더명
//		e.g. 현재 위치는 E드라이브고, 목적지는 D드라이브의 myfolder라면
//			 ==> D: -> enter -> cd myfolder -> enter
//    명령2. 현재 위치의 파일,폴더 보기 : dir

//  - 컴파일이 완료되면 아무 것도 없는 공백이 나와야 하고, 어떠한 메세지가 뜬다면 에러가 났음을 의미한다.
//  - 컴파일 이후에는 해당 자리에 동명의 .class 파일이 생성되어있다. dir로 확인하거나 직접 창을 열어 확인해보면 된다.
//  - class 파일은 더블클릭해도 실행되거나 읽을 수 없다. 왜냐하면 class 파일은 JVM만 이해할 수 있는 바이트코드로 쓰여져 있는데 
//    바이트코드는 오직 JVM만 읽을 수 있고 운영체제와 우리는 읽을 수 없다. 
//    우리가 원하는 결과를 보려면 JVM에게 class 파일을 읽어내도록 명령해야 한다.
//  - 따라서 자바는 class 파일과 JVM이 하나의 프로그램이라고 보면 된다. (아, 물론 JRE도.. ㅠㅠ)
//    결국 C나 C++ 같이 exe 프로그램이 생성되지 않는다. 
//    굳이! exe로 만들고 싶으면 jsmooth라는 프로그램을 사용하면 된다.. 하지만 아직 사용법을 숙지하기 어려우니 훗날 필요할 때 구글링하길 바란다..
// 3. 실행하기 (JVM아 출동해!)
//  형식 : (cmd에서) java 클래스명 
//  주의 : .class를 쓰지 않는다 ( e.g. java 클래스명.class (X) )

//    참고 : path란, 현재 위치에 상관없이 자유롭게 실행하고자 하는 명령(프로그램)이 있다면 그들이 있는 위치를 저장해두는 특별한 곳이다.
//		     명령(프로그램)을 실행하도록 했을 때 그 명령(프로그램)이 현재 위치에 없다면, 
//         환경변수 중 path에 적혀있는 경로들을 차례로 뒤져 해당 명령(프로그램)을 찾아서 실행하는 것이 원리이다.
//         ping이나 ipconfig와 같은 명령도 사실 C:\Windows\system32 폴더에 ping.exe, ipconfig.exe로 존재하는데 
//         C:\Windows\system32 폴더가 path에 적혀있기 때문에 
//         매번 C:\Windows\system32\ping, C:\Windows\system32\ipconfig로 실행할 필요 없이
//             ping, ipconfig 단 한 단어로 실행할 수 있는 것이다..
//    
//       => 우리는 jdk까지의 경로를 JAVA_HOME이라는 변수로 따로 만들고 이에 bin을 붙여 path에 추가했었다.
//			(%JAVA_HOME%\bin)
//       => 그럼 jdk의 bin 폴더에 있는 모든 명령어들을 어디서나 자유롭게 호출할 수 있다.
//          (예전엔 이클립스같은 좋은 프로그램이 없었고 매번 메모장 같은 에디터로 개발을 했기때문에 cmd로 컴파일을 해야했다. 
//           그럴 때마다 매번 경로를 쓰는게 귀찮았기 때문에 하던 작업이다. 오늘날에는 메모장에 개발을 하지 않기 때문에 
//           이 과정이 이해가 안된다면 지금 말고 먼 훗날 공부하길 추천한다 ㅠㅠ) 
//  



// 1. 주석이란,
// 소스파일은 모든 텍스트를 명령으로 인식하기 때문에, 메모를 하고 싶을 때는 반드시 텍스트의 맨 앞에 메모임을 표시해야 합니다. 
// 메모의 정식명칭은 주석(comments)라고 하며, 주석 처리 방법은 2가지가 있습니다.
// : 한 줄 메모(주석) - 단축키 : (커서 올리거나 드래그) ctrl + shift + c (다시 누르면 주석 해제)
/* : 구문 메모(선택 주석) */ 

// 2. 이클립스에서 소스파일은.. 
// 저장 : ctrl + s 
// 실행 : ctrl + F11

// Test01.java는 Test01이라는 이름의 자바소스파일(.java)를 의미합니다.
//  우리가 ctrl + F11을 눌러 실행을 시키면
//  가장 먼저 자바 컴파일러가 Test01.java를 가지고 Test01.class 파일을 생성합니다.
//  그 다음 JVM이 출동하여 Test01.class를 인터프리팅(실행)합니다. 
//  따라서 프로그램 사용자에게 필요한 것은 JVM과 Test01.class파일이며,
//  Test01.java가 없어도 Test01.class만 있다면 실행됩니다. (대신 코드내용은 볼 수 없습니다.)

public class Test01 { // Test01 클래스 영역의 시작
	// 3. 클래스 작성 시 주의사항 (외우지 말고 그냥 읽어보세요.)
	//  1) public class 클래스명 => 소스파일명, 이 둘은 반드시 같아야합니다. 
	//  2) 이름 수정을 원할 경우 옆의 package explorer의 소스파일을 우클릭하고 F2를 눌러 수정합니다. (이상한 창이 뜨면 그냥 Ok나  Next 누르세요.) 
	//  3) 자바는 클래스 기반 언어입니다. 따라서 대부분의 자바 코드는 무조건 클래스 안에서만 작성되어야 합니다. 
	//    (단, 저기 맨 윗줄의 package 선언과 나중에 배울 import 선언은 제외합니다.)
	
	
	public static void main(String[] args) { // 메인 메소드 영역의 시작
	// 4. 메인메소드란,
	//  자바 프로그램의 시작점과 끝점이 되는 중요한 녀석입니다.
	//  프로그램이 실행되면, JVM은 이 메인메소드를 찾는데, 메인메소드가 없으면 실행하지 않습니다.
	//  메인메소드의 '{'는 프로그램의 시작, '}'는 프로그램의 끝이라고 생각하면 됩니다.
	//  주의 : 메인메소드는 반드시 public static void main(String[] args){...} 입니다.
	//       대소문자, 띄어쓰기, 오타에 주의하세요!
	//	주의 : 당분간은 메인 메소드 안에서만 코딩합니다.
		
		System.out.println("Hello!");
		// 5. System.out.println( 출력할 데이터 );
		// 표준 출력 명령인 System.out.println()입니다. 줄여서 sysout이라고도 표현합니다.
		// 이 명령은 소괄호() 내부의 데이터를 콘솔(cmd창, terminal창, 이클립스에서는 console창)에 출력합니다.
		// 주의점! 문자열(문자 한 개 이상) 데이터인 경우는 쌍따옴표(")로 감싸주어야 합니다.
		
	} // 메인 메소드 영역의 끝
	// 알고보니 메인메소드 안에는 sysout 한 줄 뿐이었네요.
	// 결과적으로는 Hello를 모니터에 출력하는 짧은 프로그램이었습니다.
	// 이 메인메소드에는 여러 줄의 코드를 적을 수 있을 뿐만 아니라, 여러 객체(부품)를 가져와 조립해서 사용할 수도 있습니다.
	
} // Test01 클래스 영역의 끝

// 5. 중괄호의 의미?
// { : 영역의 시작
// } : 영역의 끝
// 참고 : 세상 모든 코드의 괄호들은..( '()' '{}' '[]') 반드시 짝꿍이 있어야 합니다!

// 6. 세미콜론(;)의 의미?
// 명령의 마침표 역할을 합니다. 명령 1개가 종료되었음을 의미합니다. 
// 있어야 할 자리에 세미콜론이 없을 경우 에러가 발생하니 조심하세요.

// 이클립스에서 코드를 작성할 때는 
// 	1. 프로젝트 만들기
// 	2. 패키지 만들기(띄어쓰기 안됨. 모두 소문자로, 3번 중첩을 추천 e.g. com.큰이름.작은이름)
// 	3. 클래스 추가하기(띄어쓰기 안됨. 맨 앞글자 대문자로, 단어 앞마다 대문자로. e.g. MyFirstJava)
// 순서로 제작하면 됩니다. 
















